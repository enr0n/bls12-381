/**
 * Operations and utilities for working with elements in BLS12-381's G_2 group.
 * G_2 is an order r subgroup of the curve E': y^2 = x^3 + 4(u+1) defined over
 * the field F_p^2.
 *
 * Generally, each type and function will have an _affine and _proj variant, with
 * the exception of the group operations themselves which are implemented with
 * algorithms using projective coordinates.
 */
#ifndef _G2_H_
#define _G2_H_

#include <stdbool.h>

#include "finite_field.h"

/* A group element represented in affine coordinates. */
typedef struct {
    fp2_elem *x;
    fp2_elem *y;

    /* Indicate this is a point at infinity. */
    bool infinity;
} G2_elem_affine;

/* A group element represented in projective coordinates. */
typedef struct {
    fp2_elem *x;
    fp2_elem *y;
    fp2_elem *z;
} G2_elem_proj;

/* Covert affine to projective, and vice versa. */
void G2_affine2proj(G2_elem_proj *proj, const G2_elem_affine *affn);
void G2_proj2affine(G2_elem_affine *affn, const G2_elem_proj *proj);

/**
 * Initialize a group element from the provided strings. Using these
 * functions does not guarantee that the resulting point will lie on
 * the curve E. These should only be used when the input is known to
 * produce a group element, such as initializing generators from well
 * known parameters.
 */
void G2_elem_affine_from_str(G2_elem_affine *P,
                             const char *x0, const char *x1,
                             const char *y0, const char *y1);
void G2_elem_proj_from_str(G2_elem_proj *P,
                           const char *x0, const char *x1,
                           const char *y0, const char *y1,
                           const char *z0, const char *z1);

/**
 * Initialize a group element as the identity, i.e. the point at infinity.
 */
void G2_identity_init_affine(G2_elem_affine *e);
void G2_identity_init_proj(G2_elem_proj *e);

/**
 * Initialize a group element as a particular generator, namely the base point
 * defined here:
 *
 * https://tools.ietf.org/id/draft-irtf-cfrg-pairing-friendly-curves-08.html#section-4.2.1-10.2.1
 *
 * Note that because G_2 is prime order, all points are generators.
 */
void G2_generator_init_affine(G2_elem_affine *g);
void G2_generator_init_proj(G2_elem_proj *g);

/**
 * Free the memory held by the group element data structure.
 */
void G2_elem_free_affine(G2_elem_affine *P);
void G2_elem_free_proj(G2_elem_proj *P);

/**
 * Make sure the point lies on the curve E'. This should always be true
 * when using points generated by this API. This may NOT be true for
 * points initialized by G2_elem_affine_from_str or G2_elem_proj_from_str.
 */
bool G2_is_on_curve_affine(const G2_elem_affine *P);
bool G2_is_on_curve_proj(const G2_elem_proj *P);

/**
 * Check if the element P is the identity element.
 */
bool G2_is_identity_affine(const G2_elem_affine *P);
bool G2_is_identity_proj(const G2_elem_proj *P);

/**
 * Check if the elements P and Q are in the same equivalency class.
 */
bool G2_equiv_affine(const G2_elem_affine *P, const G2_elem_affine *Q);
bool G2_equiv_proj(const G2_elem_proj *P, const G2_elem_proj *Q);

/**
 * Negate an element in G_2.
 */
void G2_negate_affine(G2_elem_affine *r, const G2_elem_affine *P);
void G2_negate_proj(G2_elem_proj *r, const G2_elem_proj *P);

/**
 * Group operations.
 *
 * Each of these returns the result in projective coordinates.
 */
void G2_double_proj(G2_elem_proj *r, const G2_elem_proj *P);
void G2_add_proj(G2_elem_proj *r, const G2_elem_proj *P, const G2_elem_proj *Q);
void G2_add_mixed(G2_elem_proj *r, const G2_elem_proj *P, const G2_elem_affine *Q);

#endif /* _G2_H_ */
